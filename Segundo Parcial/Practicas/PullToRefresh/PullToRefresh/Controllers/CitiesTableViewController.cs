// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Collections.Generic;
using PullToRefresh.Models;

namespace PullToRefresh
{
	public partial class CitiesTableViewController : UITableViewController
	{
        #region Class Variables

        //Hecho en clase.
        UIRefreshControl refreshControl;



        //Contenedores con los datos. Hecho por mí.
        Dictionary<string, List<string>> dictCities;
        List<string> lstHeaders;

        #endregion


        #region Constructors

        public CitiesTableViewController(IntPtr handle) : base(handle)
        {
        
        }

        #endregion


        #region Controller Life Cycle

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            //Se carga lo de Internal Functionality
            InitializeComponents();


        }

        #endregion


        #region User Interactions

        void RefreshControl_ValueChanged(object sender, EventArgs e)
        {
            //TODO: Aquí vamos a descargar los datos de internet.

            //Descargar de internet.
            CitiesManager.SharedInstance.FetchCities();

        }

        #endregion


        #region TableView DataSource

        //El encabezado por cada sección.
        public override string TitleForHeader(UITableView tableView, nint section)
        {
            int position = int.Parse(section.ToString());

            return lstHeaders[position];
        }

        //Las letras pequeñas de la derecha para acceder rápido a cada sección.
        public override string[] SectionIndexTitles(UITableView tableView)
        {
            return lstHeaders.ToArray();
        }

        //El número de secciones, basado en los keys obtenidos.
        public override nint NumberOfSections(UITableView tableView)
        {
            return lstHeaders.Count;
        }

        //El número de renglones por cada sección.
        public override nint RowsInSection(UITableView tableView, nint section)
        {
            int position = int.Parse(section.ToString());

            return dictCities[lstHeaders[position]].Count;
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            var cell = TableView.DequeueReusableCell("BasicTableViewCell", indexPath);

            //Obtener el valor string del header.
            var headerSection = lstHeaders[indexPath.Section];

            //Usar el valor header para obtener la lista de Cities.
            var lstCitiesPerSection = dictCities[headerSection];

            //Con el valor de Row se obtiene el respectivo Citie.
            cell.TextLabel.Text = lstCitiesPerSection[indexPath.Row];

            return cell;
        }

        #endregion


        #region Cities Manager Events

        //Estos son llamados en hilos secundarios,
        //por lo tanto, para alterar la interfaz hay que ejecutar
        //explicítamente en el hilo principal algunas cosas.
        void CitiesManager_CitiesFetched(object sender, Models.CitiesEventArgs e)
        {
            dictCities = e.Cities;

            lstHeaders = new List<string>();
            //Se guardan los headers en esta lista
            /*
            foreach (string valueHeader in dictCities.Keys)
            {
                lstHeaders.Add(valueHeader);
            }
            */
            lstHeaders.AddRange(dictCities.Keys);

            //Este método se llama desde otro hilo, hay que pasarlo al hilo principal.
            InvokeOnMainThread(() => {

                //Para detener la animación del Refrescador.
                refreshControl.EndRefreshing();

                //Actualizar la tabla.
                TableView.ReloadData();

            });


        }

        void CitiesManager_FetchCitiesFailed(object sender, Models.ErrorEventArgs e)
        {
            //Console.WriteLine("Something failed ...");


            InvokeOnMainThread(() => {

                //Para detener la animación del Refrescador.
                refreshControl.EndRefreshing();

                UIAlertController alert = UIAlertController.Create("ERROR:", e.Message, UIAlertControllerStyle.Alert);
                alert.AddAction(UIAlertAction.Create("Ok", UIAlertActionStyle.Cancel, null));
                PresentViewController(alert, animated: true, completionHandler: null);
            });

        }

        #endregion


        #region Internal Functionality

        void InitializeComponents()
        {
            //Registrar los eventos que avisan sobre la descarga.
            CitiesManager.SharedInstance.CitiesFetched += CitiesManager_CitiesFetched;
            CitiesManager.SharedInstance.FetchCitiesFailed += CitiesManager_FetchCitiesFailed;


            //Esto lo hice yo.
            //Se inicializan las variables y se coloca el Singleton al dictionario.
            lstHeaders = new List<string>();
            dictCities = CitiesManager.SharedInstance.GetDefaultCities();

            //Se guardan los headers en esta lista
            /*
            foreach (string valueHeader in dictCities.Keys)
            {
                lstHeaders.Add(valueHeader);
            }
            */
            lstHeaders.AddRange(dictCities.Keys);

            //Esto se hizo en clase.
            refreshControl = new UIRefreshControl();

            //Se asigna el evento para detectar los cambios.
            refreshControl.ValueChanged += RefreshControl_ValueChanged;

            //Agregar el control a la tabla.
            //Se usa el TableView porque es de un TableViewController.
            TableView.RefreshControl = refreshControl;
        }

        #endregion

    }
}
